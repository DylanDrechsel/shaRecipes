generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int               @id @default(autoincrement())
  firstname       String?
  lastname        String?
  username        String            @unique
  email           String            @unique
  password        String
  chatrooms       Chatrooms[]
  comments        Comments[]
  favoriteRecipes FavoriteRecipes[]
  followedUsers   FollowedUsers[]
  likes           Likes[]
  messages        Messages[]
  profile         Profile?
  recipes         Recipes[]
}

model Recipes {
  id                                                Int               @id @default(autoincrement())
  createdAt                                         DateTime          @default(now())
  updatedAt                                         DateTime          @default(now())
  title                                             String
  totalLikeValue                                    Int               @default(0)
  content                                           String?
  ingredients                                       Json
  directions                                        Json
  published                                         Boolean           @default(true)
  category                                          String
  authorId                                          Int
  imageUrl                                          String?
  imageKey                                          String?
  author                                            User              @relation(fields: [authorId], references: [id])
  comments                                          Comments[]
  FavoriteRecipes_FavoriteRecipes_recipeIdToRecipes FavoriteRecipes[] @relation("FavoriteRecipes_recipeIdToRecipes")
  likes                                             Likes[]
  FavoriteRecipes_FavoriteRecipesToRecipes          FavoriteRecipes[]
}

model Likes {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  like      Boolean  @default(false)
  postId    Int
  authorId  Int
  author    User     @relation(fields: [authorId], references: [id])
  recipe    Recipes  @relation(fields: [postId], references: [id])
}

model Profile {
  id       Int     @id @default(autoincrement())
  created  Boolean @default(false)
  bio      String
  imageUrl String?
  imageKey String?
  authorId Int     @unique
  author   User    @relation(fields: [authorId], references: [id])
}

model Comments {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String
  authorId  Int
  postId    Int?
  author    User     @relation(fields: [authorId], references: [id])
  recipe    Recipes? @relation(fields: [postId], references: [id])
}

model Chatrooms {
  id        Int        @id @default(autoincrement())
  createdAt DateTime   @default(now())
  authorId  Int
  guests    String[]
  author    User       @relation(fields: [authorId], references: [id])
  messages  Messages[]
}

model Messages {
  id         Int       @id @default(autoincrement())
  createdAt  DateTime  @default(now())
  content    String
  authorId   Int
  chatroomId Int
  author     User      @relation(fields: [authorId], references: [id])
  chatroom   Chatrooms @relation(fields: [chatroomId], references: [id])
}

model FavoriteRecipes {
  id                                        Int       @id @default(autoincrement())
  authorId                                  Int
  recipeId                                  Int
  createdAt                                 DateTime  @default(now())
  author                                    User      @relation(fields: [authorId], references: [id])
  Recipes_FavoriteRecipes_recipeIdToRecipes Recipes   @relation("FavoriteRecipes_recipeIdToRecipes", fields: [recipeId], references: [id])
  Recipes_FavoriteRecipesToRecipes          Recipes[]
}

model FollowedUsers {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  followUsernane String
  fallowedUserId Int
  authorId       Int
  author         User     @relation(fields: [authorId], references: [id])
}
